#include "system.h"
#include "../utility/maths.h"
#include "../utility/fileload.h"

int initSystems(systemCore * core){
	int err = 0;
	/*
	#define COMP_ENTITY 	((COMPTYPE)1)<<0
	#define COMP_RENDER 	((COMPTYPE)1)<<1
	#define COMP_POSITION 	((COMPTYPE)1)<<2
	#define COMP_PHYSICS 	((COMPTYPE)1)<<3
	 */
	array * a = NULL;
	core->comparrays = arr_init(1, sizeof(array*));
	err = initEntitySystem(&(core->Entity));
	a = &(core->Entity.entities);
	arr_add(&(core->comparrays), (void*)a);
	err = initRenderer(&(core->Render), 1240, 720, "Sol2");
	a = &(core->Render.renderComps);
	arr_add(&(core->comparrays), (void*)a);
	err = initPhys(&(core->Physics));
	a = &(core->Physics.posComps);
	arr_add(&(core->comparrays), (void*)a);
	a = &(core->Physics.physComps);
	arr_add(&(core->comparrays), (void*)a);
	err = initScheduler(&(core->Schedule));

	
	return err;
};

int make_entity(systemCore * core, COMPTYPE type){
	int err = 0;
	entity e;
	e.type = type;
	core->Entity.maxID++;
	e.ID = core->Entity.maxID;
	if(core->Entity.maxID == 4294967295){
		printf("Probably an entity ID overflow!\n");
		exit(-1);
	}
	arr_add(&(core->Entity.entities), (void*)&e);
	addEntityComponents(core, e.type, e.ID);
	return err;
};

int addEntityComponents(systemCore * core, COMPTYPE type, COMPTYPE ID){
	int err = 0;
	//printf("%zu\n", type);
	//printf("%zu\n", type & COMP_POSITION);
	if((type & COMP_POSITION) != 0){
		comp_pos p;
		glm_mat4_identity(p.transform);
		printf("%d, %d\n", core->comparrays.size, intlog2(COMP_POSITION));
		array * po = arr_get(array*, core->comparrays, intlog2(COMP_POSITION));
		printf("%d, %d\n", po->elementsize, sizeof(comp_pos));
		arr_add(po, (void*)(&p));
		//arr_add((arr_get(array*, core->comparrays, intlog2(COMP_POSITION))), (void*)&(p));
	}
	if((type & COMP_RENDER) != 0){
	}
	if((type & COMP_PHYSICS) != 0){
	}
	return err;
}
